# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BuildingDetectorDialog
                                 A QGIS plugin
 Applys the mask r-cnn algorithm to detect and segment buildings.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-01-31
        git sha              : $Format:%H$
        copyright            : (C) 2022 by André Estevam Costa Oliveira
        email                : andre.estevam.unb@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.core import QgsMapLayerProxyModel
from qgis.PyQt.QtWidgets import QMessageBox

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'building_detector_dialog_base.ui'))


class BuildingDetectorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(BuildingDetectorDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.mlcb_raster.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.pb_help.clicked.connect(self.pop_message_info)
        
    def pop_message_info(self):
        msg = QMessageBox()
        msg.setIcon(1)
        msg.setWindowTitle("Ajuda")
        
        msg.setText("A seguir os seguintes tópicos: \n 1. O que é. \n 2. Como funciona.\
        \n 3. Forma de utilização. \n \nO que é: \nUma integração entre um modelo de aprendizado de máquina em ambiente SIG para a detecção de edificações.\
        \n \nComo funciona: \nO plugin se responsabiliza por todo o pré-processamento da imagem a ser alimentada ao modelo, inferência e  formatação dos resultados em .shp e .png. Para melhor entendimento do modelo utilizado e seu treinamento referir ao artigo de Girshick, Ross et al. (2014) e ao trabalho de Estevam, André (2020) referentes à arquitetura Mask R-CNN.\
        \n\nForma de utilização: \nBasta selecionar a imagem a qual deseja ser feito a inferência e a precisão: detecções de probabilidade menor que o threshold serão descartadas. Preenchidos os campos, basta pressionar o botão 'Executar' e utilizar os dados de saída.")
        
        show = msg.exec_()