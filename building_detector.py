# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BuildingDetector
                                 A QGIS plugin
 Applys the mask r-cnn algorithm to detect and segment buildings.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-01-31
        git sha              : $Format:%H$
        copyright            : (C) 2022 by André Estevam Costa Oliveira
        email                : andre.estevam.unb@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# Qgis imports
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox

from qgis.core import QgsApplication
from qgis import processing

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .building_detector_dialog import BuildingDetectorDialog

# Standart imports
import os.path
import numpy as np
try:
    import gdal
except:
    from osgeo import gdal

# Initialize helper functions from files mask_rcnn_torch_inference.py and my_utils.py
from .my_utils import load_image_as_np_array, load_raster_as_np_array, save_tensor_as_raster, single_dimension_mask
from .mask_rcnn_torch_inference import get_model_instance, get_inference

# Defining model's weights path
plugin_dir_path, _ = os.path.split(os.path.realpath(__file__))
weights_path = os.path.join(plugin_dir_path, '50_state_dict_5.pth')


class BuildingDetector:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'BuildingDetector_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Building Detector')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('BuildingDetector', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/building_detector/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Building detection with mask r-cnn'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Building Detector'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = BuildingDetectorDialog()
            self.dlg.pb_help.clicked.connect(self.pop_message_info)
            self.dlg.pb_exe.clicked.connect(self.execute)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            pass
    
    
    def pop_message_info(self):
        '''
        Show a Help window which contains the following items: What is this plugin, How does it work
        and How to use it.
        '''
        self.dlg.msg = QMessageBox()
        self.dlg.msg.setIcon(1)
        self.dlg.msg.setWindowTitle("Ajuda")
        
        self.dlg.msg.setText("A seguir os seguintes tópicos: \n 1. O que é. \n 2. Como funciona.\
        \n 3. Forma de utilização. \n \nO que é: \nUma integração entre um modelo de aprendizado de máquina em ambiente SIG para a detecção de edificações.\
        \n \nComo funciona: \nO plugin se responsabiliza por todo o pré-processamento da imagem a ser alimentada ao modelo, inferência e  formatação dos resultados em .shp e .png. Para melhor entendimento do modelo utilizado e seu treinamento referir ao artigo de Girshick, Ross et al. (2014) e ao trabalho de Estevam, André (2020) referentes à arquitetura Mask R-CNN.\
        \n\nForma de utilização: \nBasta selecionar a imagem a qual deseja ser feito a inferência e a precisão: detecções de probabilidade menor que o threshold serão descartadas. Preenchidos os campos, basta pressionar o botão 'Executar' e utilizar os dados de saída.")
        
        show = self.dlg.msg.exec_()
        
        
    def execute(self):
        '''
        Where everything happens: image loading, model loading, inference, preprocess and, finally, output.
        '''
        # getting user's input
        return_image_file = self.dlg.chb_img_file.isChecked()
        return_vector_file = self.dlg.chb_vector_file.isChecked()
        threshold = self.dlg.dsb_threshold.value()
        output_path = self.dlg.file_explorer.filePath()
        output_path = os.path.splitext(output_path)[0]      # making sure it has no extension
        
        # getting qgis raster object and getting it's location
        raster_lyr = self.dlg.mlcb_raster.currentLayer()
        raster_path = raster_lyr.dataProvider().dataSourceUri()
        
        # loading raster as a numpy array
        try:
            img_np = load_raster_as_np_array(raster_path)/255
        except:
            img_np = load_image_as_np_array(raster_path)/255
        
        
        # getting inference
        mask_tensor, _ = get_inference(weights_path, img_np, threshold)
        mask_np = mask_tensor.detach().numpy()
        
        
        # saving tensors as image file
        save_tensor_as_raster(raster_path, mask_tensor, output_path, 0.90)
            
        # from raster to vector
        if return_vector_file:
            processing.run("gdal:polygonize", {'INPUT': output_path+'.tif', 
                                                'BAND': 1, 
                                                'FIELD': 'ID', 
                                                'OUTPUT': output_path+'.shp'})
        '''
        self.dlg.msg = QMessageBox()
        self.dlg.msg.setIcon(1)
        self.dlg.msg.setWindowTitle("Execute")
        self.dlg.msg.setText("Mask type: {}".format(type(mask_img)))
        show = self.dlg.msg.exec_()
        '''